<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>관리자: 쿠폰 관리</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      font-size: 18px;
      text-align: center;
      background-color: #f0f0f0;
      padding: 20px;
    }
    h1, h2 { color: #333; }
    .section { margin: 20px auto; max-width: 800px; }
    input, button, select {
      font-size: 18px;
      padding: 10px;
      margin: 5px;
      width: 200px;
      box-sizing: border-box;
    }
    button {
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
    button:hover { background-color: #45a049; }
    .error { color: red; }
    .success { color: green; }
    table {
      width: 100%;
      max-width: 800px;
      margin: 20px auto;
      border-collapse: collapse;
      background-color: white;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 10px;
      text-align: center;
    }
    th {
      background-color: #4CAF50;
      color: white;
    }
    #history-table, #remaining-table { display: none; }
    #modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      justify-content: center;
      align-items: center;
    }
    .modal-content {
      background-color: white;
      padding: 20px;
      border-radius: 5px;
      text-align: center;
      width: 300px;
    }
  </style>
</head>
<body>
  <h1>관리자: 쿠폰 관리</h1>
  <a href="index.html" style="position: fixed; top: 20px; left: 20px; background-color: #4CAF50; color: white; padding: 10px 20px; border-radius: 5px; text-decoration: none;">쿠폰 사용 페이지</a>
  <div class="section">
    <h2>쿠폰 발급</h2>
    <input type="text" id="admin-name" placeholder="직원 이름 입력">
    <select id="coupon-count">
      <option value="1">1장</option>
      <option value="2">2장</option>
    </select>
    <button onclick="openModal('issue')">쿠폰 발급</button>
    <div id="admin-message"></div>

    <h2>내역 조회</h2>
    <input type="text" id="query-name" placeholder="이름 입력 (비우면 전체)">
    <input type="date" id="query-date" placeholder="날짜 선택">
    <button onclick="queryHistory()">조회</button>
    <h2>몰아보기</h2>
    <table id="summary-table">
      <thead>
        <tr>
          <th>날짜</th>
          <th>이름</th>
          <th>동작</th>
          <th>입력 일시</th>
        </tr>
      </thead>
      <tbody id="summary-table-body"></tbody>
    </table>
    <h2>자세히 보기</h2>
    <button onclick="toggleDetails()">자세히 보기</button>
    <table id="history-table">
      <thead>
        <tr>
          <th>날짜</th>
          <th>이름</th>
          <th>동작</th>
          <th>입력 일시</th>
        </tr>
      </thead>
      <tbody id="history-table-body"></tbody>
    </table>
    <h2>남은 쿠폰 현황</h2>
    <button onclick="toggleRemaining()">남은 쿠폰 보기</button>
    <table id="remaining-table">
      <thead>
        <tr>
          <th>이름</th>
          <th>발급일자</th>
          <th>만료일</th>
          <th>쿠폰 잔량</th>
        </tr>
      </thead>
      <tbody id="remaining-table-body"></tbody>
    </table>
  </div>

  <div id="modal">
    <div class="modal-content">
      <h3>관리자 비밀번호 입력</h3>
      <input type="password" id="admin-password" placeholder="비밀번호 입력">
      <button onclick="submitPassword()">확인</button>
      <button onclick="closeModal()">취소</button>
    </div>
  </div>

  <script>
    // 오늘 날짜 계산
    function getToday() {
      return new Date().toISOString().split('T')[0].slice(2); // 예: 25-07-13
    }

    // 날짜 포맷
    function formatDate(date) {
      const d = new Date(date);
      return `${String(d.getFullYear()).slice(2)}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;
    }

    // 시간 포맷
    function formatTime(date) {
      const d = new Date(date);
      return `${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')} ${String(d.getHours()).padStart(2, '0')}:${String(d.getMinutes()).padStart(2, '0')}`;
    }

    // 만료된 쿠폰 제거
    function removeExpiredCoupons() {
      let coupons = [];
      try {
        const storedCoupons = localStorage.getItem('coupons');
        coupons = storedCoupons ? JSON.parse(storedCoupons) : [];
        if (!Array.isArray(coupons)) {
          throw new Error('Coupons is not an array');
        }
      } catch (e) {
        console.error('localStorage 쿠폰 파싱 오류:', e);
        return [];
      }
      const today = formatDate(new Date());
      coupons = coupons.filter(c => c.expireDate >= today);
      localStorage.setItem('coupons', JSON.stringify(coupons));
      return coupons;
    }

    // 비밀번호 모달 열기
    let currentAction = '';
    function openModal(action) {
      currentAction = action;
      document.getElementById('modal').style.display = 'flex';
      document.getElementById('admin-password').value = '';
      document.getElementById('admin-password').focus();
    }

    // 비밀번호 모달 닫기
    function closeModal() {
      document.getElementById('modal').style.display = 'none';
      document.getElementById('admin-message').innerHTML = '';
    }

    // 비밀번호 확인 및 쿠폰 발급
    function submitPassword() {
      const password = document.getElementById('admin-password').value;
      if (password !== 'admin123') {
        document.getElementById('admin-message').innerHTML = '<span class="error">잘못된 비밀번호입니다!</span>';
        return;
      }
      if (currentAction === 'issue') {
        issueCoupon();
      }
      closeModal();
    }

    // 쿠폰 발급
    function issueCoupon() {
      const name = document.getElementById('admin-name').value.trim();
      const count = parseInt(document.getElementById('coupon-count').value);
      const message = document.getElementById('admin-message');

      if (!name) {
        message.innerHTML = '<span class="error">이름을 입력하세요!</span>';
        return;
      }

      const today = formatDate(new Date());
      const code = `${name}_${today}_${Math.random().toString(36).substr(2, 4)}`;
      const expireDate = new Date();
      expireDate.setDate(expireDate.getDate() + 7);
      const coupon = {
        name,
        code,
        count,
        remaining: count,
        issueDate: today,
        useDate: '',
        expireDate: formatDate(expireDate)
      };

      let coupons = removeExpiredCoupons();
      coupons.push(coupon);
      localStorage.setItem('coupons', JSON.stringify(coupons));

      let logs = [];
      try {
        const storedLogs = localStorage.getItem('logs');
        logs = storedLogs ? JSON.parse(storedLogs) : [];
        if (!Array.isArray(logs)) {
          throw new Error('Logs is not an array');
        }
      } catch (e) {
        console.error('localStorage 로그 파싱 오류:', e);
        message.innerHTML = '<span class="error">로그 저장 중 오류 발생!</span>';
        return;
      }

      logs.push({
        date: today,
        name,
        action: '발급',
        code,
        time: formatTime(new Date())
      });
      localStorage.setItem('logs', JSON.stringify(logs));

      message.innerHTML = `<span class="success">쿠폰 발급 완료! 코드: ${code}</span>`;
      queryHistory();
    }

    // 자세히 보기 토글
    function toggleDetails() {
      const table = document.getElementById('history-table');
      const button = document.querySelector('button[onclick="toggleDetails()"]');
      if (table.style.display === 'none') {
        table.style.display = 'table';
        button.textContent = '자세히 숨기기';
      } else {
        table.style.display = 'none';
        button.textContent = '자세히 보기';
      }
    }

    // 남은 쿠폰 현황 토글
    function toggleRemaining() {
      const table = document.getElementById('remaining-table');
      const button = document.querySelector('button[onclick="toggleRemaining()"]');
      if (table.style.display === 'none') {
        table.style.display = 'table';
        button.textContent = '남은 쿠폰 숨기기';
      } else {
        table.style.display = 'none';
        button.textContent = '남은 쿠폰 보기';
      }
    }

    // 내역 조회
    function queryHistory() {
      const name = document.getElementById('query-name').value.trim();
      const date = document.getElementById('query-date').value.slice(2);
      const remainingTableBody = document.getElementById('remaining-table-body');
      const summaryTableBody = document.getElementById('summary-table-body');
      const historyTableBody = document.getElementById('history-table-body');
      remainingTableBody.innerHTML = '';
      summaryTableBody.innerHTML = '';
      historyTableBody.innerHTML = '';

      // 로그 데이터 로드
      let logs = [];
      try {
        const storedLogs = localStorage.getItem('logs');
        logs = storedLogs ? JSON.parse(storedLogs) : [];
        if (!Array.isArray(logs)) {
          throw new Error('Logs is not an array');
        }
      } catch (e) {
        console.error('localStorage 로그 파싱 오류:', e);
        remainingTableBody.innerHTML = '<tr><td colspan="4"><span class="error">내역 로드 중 오류 발생!</span></td></tr>';
        summaryTableBody.innerHTML = '<tr><td colspan="4"><span class="error">내역 로드 중 오류 발생!</span></td></tr>';
        historyTableBody.innerHTML = '<tr><td colspan="4"><span class="error">내역 로드 중 오류 발생!</span></td></tr>';
        return;
      }

      // 쿠폰 데이터 로드 및 만료된 쿠폰 제거
      let coupons = removeExpiredCoupons();

      if (!logs.length && !coupons.length) {
        remainingTableBody.innerHTML = '<tr><td colspan="4"><span class="error">내역이 없습니다!</span></td></tr>';
        summaryTableBody.innerHTML = '<tr><td colspan="4"><span class="error">내역이 없습니다!</span></td></tr>';
        historyTableBody.innerHTML = '<tr><td colspan="4"><span class="error">내역이 없습니다!</span></td></tr>';
        return;
      }

      // 로그 필터링
      const filteredLogs = logs.filter(log => 
        (!name || log.name === name) && 
        (!date || log.date === date)
      );

      // 쿠폰 필터링
      const filteredCoupons = coupons.filter(coupon => 
        coupon.remaining > 0 &&
        (!name || coupon.name === name) && 
        (!date || coupon.issueDate === date)
      );

      // 남은 쿠폰 현황
      if (!filteredCoupons.length) {
        remainingTableBody.innerHTML = '<tr><td colspan="4"><span class="error">남은 쿠폰이 없습니다!</span></td></tr>';
      } else {
        filteredCoupons.forEach(coupon => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${coupon.name || ''}</td>
            <td>${coupon.issueDate || ''}</td>
            <td>${coupon.expireDate || ''}</td>
            <td>${coupon.remaining || 0}</td>
          `;
          remainingTableBody.appendChild(row);
        });
      }

      // 로그가 없는 경우
      if (!filteredLogs.length) {
        summaryTableBody.innerHTML = '<tr><td colspan="4"><span class="error">조건에 맞는 내역이 없습니다!</span></td></tr>';
        historyTableBody.innerHTML = '<tr><td colspan="4"><span class="error">조건에 맞는 내역이 없습니다!</span></td></tr>';
        return;
      }

      // 자세히 보기: 모든 로그 표시
      filteredLogs.forEach(log => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${log.date || ''}</td>
          <td>${log.name || ''}</td>
          <td>${log.action || ''}</td>
          <td>${log.time || ''}</td>
        `;
        historyTableBody.appendChild(row);
      });

      // 몰아보기: 발급과 사용 로그만 표시, 사용-취소 쌍 제외
      const summaryLogs = [];
      const usedLogs = filteredLogs.filter(log => log.action === '사용');
      const cancelLogs = filteredLogs.filter(log => log.action === '취소');

      filteredLogs.forEach(log => {
        if (log.action === '발급') {
          summaryLogs.push(log);
        } else if (log.action === '사용') {
          const hasCancel = cancelLogs.some(cancel => 
            cancel.name === log.name && 
            cancel.date === log.date &&
            cancel.code === log.code
          );
          if (!hasCancel) {
            summaryLogs.push(log);
          }
        }
      });

      if (!summaryLogs.length) {
        summaryTableBody.innerHTML = '<tr><td colspan="4"><span class="error">조건에 맞는 발급/사용 내역이 없습니다!</span></td></tr>';
      } else {
        summaryLogs.forEach(log => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${log.date || ''}</td>
            <td>${log.name || ''}</td>
            <td>${log.action || ''}</td>
            <td>${log.time || ''}</td>
          `;
          summaryTableBody.appendChild(row);
        });
      }
    }

    // 실시간 갱신 (5초마다)
    setInterval(queryHistory, 5000);

    // 페이지 로드 시 초기 조회
    document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('query-date').value = '20' + getToday();
      queryHistory();
    });
  </script>
</body>
</html> Smart Ku Golf Pavilion
